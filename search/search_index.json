{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to moudrick.net \u2014 a space for notes, experiments, and digital tinkering.</p>"},{"location":"blog/","title":"Blog","text":"<p>Welcome to the moudrick.net blog!  </p> <p>This space will soon host updates, notes, and technical explorations related to ongoing and past projects. Before new posts appear here, you\u2019re welcome to visit a pair of my earlier, old-fashioned technical blogs that remain publicly available:</p> <ul> <li>techblog.moudrick.net</li> <li>techreading.moudrick.net</li> </ul> <p>Stay tuned \u2014 the new blog will be powered by the  Material for MkDocs blog plugin and will gradually evolve with fresh content.</p>"},{"location":"blog/2025/10/09/serving-mkdocs-in-codespaces-a-simple-workaround/","title":"Serving MkDocs in Codespaces: a simple workaround","text":"<p>If you are using MkDocs inside GitHub Codespaces, you may notice that the usual:</p> <pre><code>mkdocs serve\n</code></pre> <p>does not rebuild your site when Markdown files change. The internal watcher seems broken in Codespaces, and no amount of <code>--dirtyreload</code> or <code>watchdog</code> tricks reliably triggers a rebuild.</p> <p>Here\u2019s a simple, working workaround I use:</p>"},{"location":"blog/2025/10/09/serving-mkdocs-in-codespaces-a-simple-workaround/#step-1-add-a-makefile","title":"Step 1 \u2014 Add a Makefile","text":"<p>Create a <code>Makefile</code> in the root of your repo:</p> <pre><code># Makefile for moudrick.net local dev loop\n\nPORT ?= 8000\n\n.PHONY: dev serve build clean\n\nbuild:\n    mkdocs build --clean\n\nserve:\n    python3 -m http.server -d site $(PORT)\n\n# Continuous rebuild loop for Codespaces\ndev:\n    @echo \"Starting MkDocs auto-builder on port $(PORT)\u2026\"\n    @echo \"Press Ctrl+C to stop.\"\n    @while true; do         mkdocs build --clean;       inotifywait -r -e modify,create,delete docs mkdocs.yml;     done\n\nclean:\n    rm -rf site\n</code></pre>"},{"location":"blog/2025/10/09/serving-mkdocs-in-codespaces-a-simple-workaround/#step-2-open-two-terminals","title":"Step 2 \u2014 Open two terminals","text":"<p>Terminal 1:</p> <pre><code>make dev\n</code></pre> <p>This continuously rebuilds the <code>site/</code> folder whenever any file in <code>docs/</code> or <code>mkdocs.yml</code> changes. You will see the rebuild log in this terminal.</p> <p>Terminal 2:</p> <pre><code>make serve\n</code></pre> <p>This serves the <code>site/</code> folder on port <code>8000</code> (or any port you choose). The page is served live, but note: it will not auto-refresh on changes \u2014 you need to manually refresh your browser.</p>"},{"location":"blog/2025/10/09/serving-mkdocs-in-codespaces-a-simple-workaround/#notes","title":"Notes","text":"<ul> <li>To avoid committing the generated <code>site/</code> folder, add it to <code>.gitignore</code>.  </li> <li>This method works reliably in Codespaces without depending on MkDocs\u2019 internal watcher or Python file events.</li> </ul> <p>This simple approach lets you develop your blog in Codespaces, see the site immediately, and safely prepare posts without worrying about rebuild failures.</p> <p>Originally tested on moudrick.net inside GitHub Codespaces.</p>"},{"location":"blog/2025/08/10/draft-welcome-to-the-moudricknet-blog/","title":"Draft: Welcome to the moudrick.net Blog","text":"<p>This is a draft post prepared for testing the upcoming blog setup using the Material for MkDocs blog plugin.</p> <p>When the blog goes live, this placeholder will be replaced by the first official article.</p>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#featured-project","title":"Featured Project","text":"<p>locom \u2013 locom.ninja </p> <p>Status: Active development</p> <p>An open-source tool to simplify local container orchestration for developers.  Easily define, run, and manage local compose stacks.</p> <p>GitHub</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/dev/","title":"dev","text":""},{"location":"blog/category/mkdocs/","title":"mkdocs","text":""},{"location":"blog/category/tips/","title":"tips","text":""},{"location":"blog/category/meta/","title":"meta","text":""},{"location":"blog/category/updates/","title":"updates","text":""}]}